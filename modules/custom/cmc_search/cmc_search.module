<?php
/**
 * @file
 * Code for the CMC Search feature.
 */

include_once('cmc_search.features.inc');


function cmc_search_block_info() {
  return array(
    'date_filter' => array(
      'info' => t('All dates'),
      'cache' => DRUPAL_NO_CACHE
    ),
  );
}

function cmc_search_block_view($delta = '') {
  $block = array();

  if ($delta == 'date_filter') {
    $block['subject'] = t('All dates');
    $block['content'] = cmc_search_date_filter_block_content();
  }

  return $block;
}

function cmc_search_date_filter_block_content() {
  $date_options = array(
    '-24 hours' => t('Today'),
    '-1 week' => t('This week'),
    '-1 month' => t('This month'),
    '-3 months' => t('This quarter'),
    '-1 year' => t('This year')
  );

  $items = array();
  $url = $_GET['q'];
  $filter_key = 'f';

  $params = drupal_get_query_parameters($_GET, array('page', 'q'));
  $current_filters = isset($params[$filter_key]) ? $params[$filter_key] : array();

  $active = isset($params['created']) ? $params['created'] : NULL;

  foreach ($date_options as $filter => $text) {
    $options = array();
    $options['query'] = $params;

    if ($active == $filter) {
      unset($options['query']['created']);
      $options['attributes']['class'][] = 'facetapi-active';
      $items[] = l("Remove {$text} filter", $url, $options) . $text;
    } else {
      $options['query']['created'] = $filter;
      $items[] = l($text, $url, $options);
    }
  }

  $clear_link = '';
  if ($active) {
    unset($params['created']);
    $clear_link = l('x', $_GET['q'], array('query' => $params,
                    'attributes' => array('class' => array('clear'))));
  }

  return array(
    'filter_date_block' => array(
      '#theme' => 'cmc_search_facet',
      '#clear' => $clear_link,
      'filter_dates' => array(
        '#theme' => 'item_list',
        '#items' => $items,
        '#attributes' => array('class' => 'facetapi-facetapi-links')
      ),
    ),
  );
}

/*
  Implementation of hook_menu()
*/
function cmc_search_menu() {
  $items = array();

  $items['admin/config/cmc/search'] = array(
    'title' => 'CMC Search Form Configuration',
    'description' => 'CMC Search Form Configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cmc_search_settings'),
  	//'page callback' => 'cmc_search_settings',
    'access arguments' => array('administer site search'),
  );

  return $items;
}

function cmc_search_settings() {

  $form = array();

  $form['cmc_search_textfield_defaults'] = array(
    '#type' => 'textarea',
    '#title' => t('Search textfield defaults'),
    '#default_value' => variable_get('cmc_search_textfield_defaults', ''),
  	'#description' => t('In form of form id::fieldname::text'),
  );

  return system_settings_form($form);
}


function cmc_search_theme() {
  return array(
    'cmc_search_facet' => array(
      'render element' => 'facets',
      'template' => 'templates/cmc_search_facet',
    ),
  );
}

function cmc_search_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'views_exposed_form') {
    $form['search_api_views_fulltext']['#attributes']['autocomplete'] = 'off';
    if (isset($form['created'])) {
      $form['created']['#type'] = 'value';
    }
  } elseif ($form_id == 'search_block_form') {
    $form['search_block_form']['#attributes']['autocomplete'] = 'off';
  }

  // default text for search textfields
  $search_textfield_defaults = cmc_search_textfield_defaults();

  if (!empty($search_textfield_defaults[$form['#id']])) {
    $setting = $search_textfield_defaults[$form['#id']];
    $form[$setting[1]]['#attributes']['placeholder'] = t($setting[2]);
  }
}

function cmc_search_textfield_defaults() {
  $defaults = variable_get('cmc_search_textfield_defaults', '');
  $defaults = explode("\n", $defaults);

  $return = array();
  foreach ($defaults as $i => $settings) {
    $settings = explode('::', $settings);
    $return[$settings[0]] = $settings;
  }

  return $return;
}

function cmc_search_parse_facet_title($title) {
  $matches = array();
  preg_match("/^([\w\&\-\;\s]*)\((\d+)\)$/", $title, $matches);

  return count($matches) ? array(trim($matches[1]), $matches[2]) :
                           array(NULL, NULL);
}

function cmc_search_block_view_alter(&$data, $block) {

  if ($block->module == 'facetapi') {
  
    $facet_name = $data['content']['#facet']['name'];
    // if facet has any items
    if (isset($data['content'][$facet_name]['#items']) &&
      count($data['content'][$facet_name]['#items'])) {

      foreach ($data['content'][$facet_name]['#items'] as $index => &$item) {

        $title = strip_tags($item['data']);
        // If the facet title is '(-)', ignore it
        if (substr($title, 0, 1) == '(') {
          continue;
        }

        // Facet titles are in the form "Name (count)"
        // Get the name and count as separate variables
        list($name, $count) = cmc_search_parse_facet_title($title);

        if (is_null($name)) {
          unset($data['content'][$facet_name]['#items'][$index]);
        }

        // Mark facets with no results as disabled
        if ($count == 0) {
          $item['class'][] = 'disabled';
        }

        // Special case for the 'content type' facet
        // Only show certain content types
        // This is a bit hacky as we're assuming we only use this facet
        // for the education section, where these are the only valid
        // content types.
        if ($facet_name == 'type' && ($_GET['q'] == 'education' || $_GET['q'] == 'education/browse')) {
          if (!in_array($name, array(
                'CMC Video', 'CMC Document Guide', 'CMC Event'
              ))) {
            unset($data['content']['type']['#items'][$index]);
          }
        } else if ($facet_name == 'type' && ($_GET['q'] == 'market-analysis')) {
          if (!in_array($name, array(
                'CMC Video', 'Blog'
              ))) {
            unset($data['content']['type']['#items'][$index]);
          }
        }
      }
    }
  }
}

function cmc_search_facetapi_facets_alter(&$build, $adapter, $realm) {

  // 'fix' breadcrumbs
  drupal_set_breadcrumb(array(
      l(t('Home'), '<front>'),
      drupal_get_title()
  ));

  drupal_add_js(drupal_get_path('module', 'cmc_search') . '/js/ajax-facets.js');

  foreach ($build as $name => $data) {
    if ($name[0] != '#') {
      $build[$name]['#theme'] = 'cmc_search_facet';

      $alias = $build[$name]['#facet']['field alias'];
      $values = array();
      //      var_dump($alias);
      foreach ($adapter->getAllActiveItems() as $k => $item) {
        //        var_dump($k);
        if (strpos(urldecode($k), $alias) === 0) {
          $values[] = $item['value'];
        }
      }

      if (count($values)) {

        $processor = $adapter->getUrlProcessor();
        $clear_facets = $processor->getQueryString(
          $build[$name]['#facet'],
          $values,
          TRUE
        );

        $clear_facets_link = l('x', $_GET['q'], array('query' => $clear_facets,
                               'attributes' => array('class' => array('clear'))));

        $build[$name]['#clear'] = $clear_facets_link;

      } else {
        $build[$name]['#clear'] = '';
      }
    }
  }

  //    dpm($build);
  //  dpm($build['#adapter']->getAllActiveItems());
}

function cmc_search_ajax_render_alter(&$commands) {
  $searcher = 'search_api@sitewide';
  $realm = 'block';

  $fields = array(
    'education/browse' => array(
      'facets' => array(
        'field_experience',
        'field_trade_type',
        'field_theme',
        'type'
      )
    ),
    'market-analysis' => array(
      'facets' => array(
        'author:field_display_name',
        'type',
        'field_theme',
        'field_blog_region'
      ),
      'blocks' => array(
        'cmc_search' => 'date_filter'
      )
    ),
    'markets/browse' => array(
      'facets' => array(
        'field_country',
        'field_instrument_type',
        'field_region',
        'field_sector'
      ),
      'filters' => array(
        'views' => '-exp-browse_markets-page'
      ),
    ),
  );

  $url = $_GET['q'];

  if (isset($fields[$url])) {
    module_load_include('inc', 'facetapi', 'facetapi.block');
    $section = $fields[$url];

    if (isset($section['facets'])) {
      foreach ($section['facets'] as $facet) {

        $delta = facetapi_hash_delta(facetapi_build_delta($searcher, $realm, $facet));
        $data = facetapi_get_block($delta);
        cmc_search_block_view_alter($data, (object)array('module' => 'facetapi'));
        $output = drupal_render($data);

        $id = '#block-facetapi-' . drupal_html_id($delta);
        $commands[] = ajax_command_replace("{$id} > div", $output);
      }
    }

    if (isset($section['blocks'])) {
      foreach ($section['blocks'] as $module => $delta) {
        //        print_r($section['blocks']);
        $output = drupal_render(module_invoke($module, 'block_view', $delta));
        $id = '#' . drupal_html_id("block-{$module}-{$delta}");
        $commands[] = ajax_command_replace("{$id} .item-list", $output);
      }
    }

    if (isset($section['filters'])) {
      foreach ($section['filters'] as $module => $delta) {
        $output = drupal_render(module_invoke($module, 'block_view', $delta));
        $id = '#' . drupal_html_id("block-{$module}-{$delta}");
        $commands[] = ajax_command_replace("{$id} form", $output);
      }
    }

  }
}

/*
  Return the number of results for the currently active search
*/
function cmc_search_results_count() {
  $searches = search_api_current_search();
  if (count($searches)) {
    $search = current($searches);
    if (isset($search[1])) {
      return $search[1]['result count'];
    }

  }
  return NULL;
}

/*
  Get the total number of results for a view which lives at the given path,
  assuming no filters/arguments have been applied. This is presented in the UI
  as the maximum total results available
  @param $view_path Path on which the view appears
*/
function cmc_search_total_results($view_path) {
  $total = 0;

  // if we have a cached result already
  if ($cache = cache_get('cmc_search_total_results:' . $view_path)) {
    $total = $cache->data;
  } else {

    $current_searches = search_api_current_search();

    // get menu information for the path
    $page = menu_get_item($view_path);

    // we can now get page arguments, including view name and display id
    list($view_name, $display_id) = $page['page_arguments'];

    $view = views_get_view($view_name, $display_id);

    $view->set_display($display_id);
    $view->display_handler->has_exposed = FALSE;

    $view->has_exposed = FALSE;
    $view->execute();

    $total = $view->query->pager->total_items;
    cache_set('cmc_search_total_results:' . $view_path, $total);

    // reset search API's current search cache as we don't want to record the
    // search we just did
    drupal_static('search_api_current_search', $current_searches, TRUE);
  }

  return $total;
}

/*
  Implementation of hook_search_api_index_items_alter
  This is called during indexing of search items, so we use this opportunity to
  clear our cached counts of search results.
*/
function cmc_search_search_api_index_items_alter(array &$items, SearchApiIndex $index) {
  static $cleared = FALSE;
  if ($cleared) {
    cache_clear_all('cmc_search_total_results:', 'cache', TRUE);
    $cleared = TRUE;
  }
}


/*
  Filters out non-PR authors
*/

function cmc_search_search_api_solr_search_results_alter(array &$results, SearchApiQueryInterface $query, Apache_Solr_Response $response) {
	
	if (isset($results['search_api_facets']) && isset($results['search_api_facets']['author:field_display_name'])) {
    $results['search_api_facets']['author:field_display_name'] = array_filter($results['search_api_facets']['author:field_display_name'], 'cmc_search_filter_pr');
  }
}

function cmc_search_filter_pr($author_facet) {
  $name = substr($author_facet['filter'], 1, -1);

  $query = new EntityFieldQuery;

  $entity = $query
    ->entityCondition('entity_type', 'user')
    ->fieldCondition('field_display_name', 'value', $name, '=')
    ->execute();

  $account = user_load(reset($entity['user'])->uid);

  return in_array('PR', $account->roles);
}